// <auto-generated />
using System;
using InventoryMgmt.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryMgmt.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6531),
                            Description = "Office equipment and devices",
                            Name = "Equipment",
                            UpdatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6533)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6534),
                            Description = "Office furniture and fixtures",
                            Name = "Furniture",
                            UpdatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6535)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6536),
                            Description = "Books and publications",
                            Name = "Books",
                            UpdatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6536)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6537),
                            Description = "Important documents and records",
                            Name = "Documents",
                            UpdatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6537)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6538),
                            Description = "Other miscellaneous items",
                            Name = "Other",
                            UpdatedAt = new DateTime(2025, 9, 13, 9, 50, 59, 664, DateTimeKind.Utc).AddTicks(6538)
                        });
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BooleanField1Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BooleanField1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("BooleanField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("BooleanField2Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BooleanField2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("BooleanField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("BooleanField3Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BooleanField3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("BooleanField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomIdElements")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CustomIdFormat")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentField1Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentField1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DocumentField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentField2Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentField2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DocumentField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentField3Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentField3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DocumentField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("MultiTextField1Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MultiTextField1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MultiTextField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("MultiTextField2Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MultiTextField2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MultiTextField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("MultiTextField3Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MultiTextField3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MultiTextField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("NumericField1Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NumericField1DisplayFormat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NumericField1IsInteger")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NumericField1MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumericField1MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumericField1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NumericField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<decimal>("NumericField1StepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumericField2Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NumericField2DisplayFormat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NumericField2IsInteger")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NumericField2MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumericField2MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumericField2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NumericField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<decimal>("NumericField2StepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumericField3Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NumericField3DisplayFormat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NumericField3IsInteger")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NumericField3MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumericField3MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumericField3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NumericField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<decimal>("NumericField3StepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TextField1Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextField1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TextField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("TextField2Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextField2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TextField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("TextField3Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextField3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TextField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryAccess", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("InventoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryAccesses");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryTag", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("InventoryTags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BooleanField1Value")
                        .HasColumnType("bit");

                    b.Property<bool?>("BooleanField2Value")
                        .HasColumnType("bit");

                    b.Property<bool?>("BooleanField3Value")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("CustomId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentField1Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentField2Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentField3Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("MultiTextField1Value")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MultiTextField2Value")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MultiTextField3Value")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("NumericField1Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumericField2Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumericField3Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TextField1Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TextField2Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TextField3Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryId", "CustomId")
                        .IsUnique()
                        .HasDatabaseName("IX_Item_Inventory_CustomId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.ItemLike", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemLikes");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PreferredTheme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Comment", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("Comments")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Category", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "Owner")
                        .WithMany("OwnedInventories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryAccess", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("UserAccesses")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "User")
                        .WithMany("InventoryAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryTag", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("InventoryTags")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Tag", "Tag")
                        .WithMany("InventoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "CreatedBy")
                        .WithMany("CreatedItems")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.ItemLike", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Item", "Item")
                        .WithMany("Likes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "User")
                        .WithMany("ItemLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Category", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InventoryTags");

                    b.Navigation("Items");

                    b.Navigation("UserAccesses");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Tag", b =>
                {
                    b.Navigation("InventoryTags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedItems");

                    b.Navigation("InventoryAccesses");

                    b.Navigation("ItemLikes");

                    b.Navigation("OwnedInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
