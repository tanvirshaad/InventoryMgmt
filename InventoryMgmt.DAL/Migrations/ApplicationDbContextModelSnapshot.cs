// <auto-generated />
using System;
using InventoryMgmt.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryMgmt.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 18, 18, 29, 44, 415, DateTimeKind.Utc).AddTicks(517),
                            Description = "Office and technical equipment",
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 18, 18, 29, 44, 415, DateTimeKind.Utc).AddTicks(521),
                            Description = "Office furniture and fixtures",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 18, 18, 29, 44, 415, DateTimeKind.Utc).AddTicks(522),
                            Description = "Books and publications",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 18, 18, 29, 44, 415, DateTimeKind.Utc).AddTicks(523),
                            Description = "Important documents and files",
                            Name = "Documents"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 18, 18, 29, 44, 415, DateTimeKind.Utc).AddTicks(523),
                            Description = "Miscellaneous items",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById1")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("InventoryId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById1");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId1");

                    b.ToTable("InventoryAccesses");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryCustomIdFormat", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormatJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryId");

                    b.ToTable("InventoryCustomIdFormats");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryFieldConfiguration", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("BooleanField1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BooleanField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("BooleanField1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BooleanField2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BooleanField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("BooleanField2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BooleanField3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BooleanField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("BooleanField3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentField1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DocumentField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentField1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentField2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DocumentField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentField2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentField3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DocumentField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentField3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOrderJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultilineTextField1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MultilineTextField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("MultilineTextField1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultilineTextField2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MultilineTextField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("MultilineTextField2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultilineTextField3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MultilineTextField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("MultilineTextField3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericField1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NumericField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("NumericField1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericField2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NumericField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("NumericField2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericField3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NumericField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("NumericField3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextField1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TextField1ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("TextField1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextField2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TextField2ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("TextField2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextField3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TextField3ShowInTable")
                        .HasColumnType("bit");

                    b.Property<string>("TextField3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryId");

                    b.ToTable("InventoryFieldConfigurations");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryTag", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("InventoryTags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BooleanField1Value")
                        .HasColumnType("bit");

                    b.Property<bool?>("BooleanField2Value")
                        .HasColumnType("bit");

                    b.Property<bool?>("BooleanField3Value")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById1")
                        .HasColumnType("int");

                    b.Property<string>("CustomId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentField1Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentField2Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentField3Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("MultilineTextField1Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultilineTextField2Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultilineTextField3Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NumericField1Value")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("NumericField2Value")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("NumericField3Value")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TextField1Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextField2Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextField3Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("InventoryId", "CustomId")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.HasIndex("ItemId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Comment", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "CreatedBy")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedById1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("Comments")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Category", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "CreatedBy")
                        .WithMany("OwnedInventories")
                        .HasForeignKey("CreatedById1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryAccess", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("InventoryAccesses")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "User")
                        .WithMany("InventoryAccesses")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryCustomIdFormat", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithOne("CustomIdFormat")
                        .HasForeignKey("InventoryMgmt.DAL.EF.TableModels.InventoryCustomIdFormat", "InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryFieldConfiguration", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithOne("FieldConfiguration")
                        .HasForeignKey("InventoryMgmt.DAL.EF.TableModels.InventoryFieldConfiguration", "InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.InventoryTag", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("InventoryTags")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Tag", "Tag")
                        .WithMany("InventoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "CreatedBy")
                        .WithMany("CreatedItems")
                        .HasForeignKey("CreatedById1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Like", b =>
                {
                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.Item", "Item")
                        .WithMany("Likes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryMgmt.DAL.EF.TableModels.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Category", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Inventory", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomIdFormat");

                    b.Navigation("FieldConfiguration");

                    b.Navigation("InventoryAccesses");

                    b.Navigation("InventoryTags");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Item", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.Tag", b =>
                {
                    b.Navigation("InventoryTags");
                });

            modelBuilder.Entity("InventoryMgmt.DAL.EF.TableModels.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedItems");

                    b.Navigation("InventoryAccesses");

                    b.Navigation("Likes");

                    b.Navigation("OwnedInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
