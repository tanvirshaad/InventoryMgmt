@model InventoryMgmt.BLL.DTOs.ItemDto

@{
    ViewData["Title"] = "Edit Item";
    var customFields = ViewBag.CustomFields as List<object> ?? new List<object>();
    var hasCustomFields = customFields.Any();
    var inventory = ViewBag.Inventory;
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h2 class="text-center">Edit Item</h2>
                @if (inventory != null)
                {
                    <p class="text-center text-muted mb-0">
                        Inventory: <strong>@inventory.Title</strong>
                    </p>
                }
            </div>
            <div class="card-body">
                <form asp-action="Edit" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="InventoryId" />
                    <input type="hidden" asp-for="Version" />
                    
                    <partial name="_CustomFieldsForm" model="Model" />
                    
                    <div class="form-group mb-3">
                        <button type="submit" class="btn btn-primary w-100">Save Changes</button>
                    </div>
                </form>
                
                <div class="text-center mt-3">
                    <a asp-action="Details" asp-controller="Inventory" asp-route-id="@Model.InventoryId" class="btn btn-secondary">
                        <i class="bi bi-arrow-left me-2"></i>Back to Inventory
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script src="~/js/custom-id-validation.js"></script>
    
    <script>
        // Store custom fields data in JavaScript
        const customFields = @Html.Raw(ViewBag.CustomFieldsJson ?? "[]");
        
        $(document).ready(function() {
            console.log("Custom fields:", customFields);
            
            // Initialize custom ID validation
            const inventoryId = $('input[name="InventoryId"]').val();
            const itemId = $('input[name="Id"]').val();
            if (inventoryId) {
                new CustomIdValidator(inventoryId, itemId);
            }
            
            // Initialize document field upload buttons
            $('.document-upload-btn').on('click', function() {
                const fieldId = $(this).data('field-id');
                alert('Document upload will be implemented in a future update');
            });
            
            // Automatically generate preview ID on page load
            function generatePreviewId() {
                const inventoryId = $('input[name="InventoryId"]').val();
                const customIdInput = $('#CustomId');
                
                // Only generate if CustomId field is empty
                if (customIdInput.val() === '') {
                    if (!inventoryId) {
                        console.error("Inventory ID not found");
                        return;
                    }
                    
                    // Call API to generate a preview ID
                    $.ajax({
                        url: `/Item/GenerateItemCustomId?inventoryId=${inventoryId}`,
                        type: 'GET',
                        success: function(response) {
                            if (response && response.success) {
                                customIdInput.val(response.customId);
                                customIdInput.attr('placeholder', 'Will be auto-generated if left empty');
                            } else {
                                console.error('Error generating ID preview:', response.message || 'Unknown error');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error generating ID preview:', error);
                        }
                    });
                }
            }
            
            // Generate preview ID when page loads (only if field is empty)
            // generatePreviewId();
            
            // Update the hidden Name field with the TextField1Value before form submission
            $('form').on('submit', function(e) {
                // Get the first text field value (usually TextField1Value)
                const firstTextField = customFields.find(f => f.type === 'text');
                if (firstTextField) {
                    const firstFieldValue = $('#' + firstTextField.id).val();
                    // Copy it to the Name field
                    $('#Name').val(firstFieldValue || 'Unnamed Item');
                }
                
                return true;
            });
        });
    </script>
}
