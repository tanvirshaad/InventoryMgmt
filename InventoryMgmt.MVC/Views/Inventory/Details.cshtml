@model InventoryMgmt.BLL.DTOs.InventoryDto

@{
    ViewData["Title"] = Model.Title;
}

@Html.AntiForgeryToken()
<div class="container-fluid">
    <!-- Inventory Header -->
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-start">
                <div class="d-flex align-items-start flex-grow-1">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <div class="me-4">
                            <img src="@Model.ImageUrl" alt="@Model.Title" class="img-thumbnail" style="max-width: 150px;" />
                            @if (ViewBag.CanEdit == true)
                            {
                                <a asp-controller="Image" asp-action="Upload" asp-route-inventoryId="@Model.Id" class="btn btn-sm btn-outline-secondary mt-1">
                                    <i class="bi bi-arrow-repeat"></i> Change
                                </a>
                            }
                        </div>
                    }
                    else if (ViewBag.CanEdit == true)
                    {
                        <div class="me-4">
                            <div class="border rounded p-3 text-center" style="width: 150px; height: 150px; display: flex; align-items: center; justify-content: center;">
                                <div>
                                    <i class="bi bi-image text-muted" style="font-size: 2rem;"></i>
                                    <p class="small text-muted mb-0">No image</p>
                                    <a asp-controller="Image" asp-action="Upload" asp-route-inventoryId="@Model.Id" class="btn btn-sm btn-outline-primary mt-2">
                                        <i class="bi bi-upload"></i> Add Image
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                    <div>
                        <h2>@Model.Title <span class="badge bg-success">All changes saved</span></h2>
                        <p class="text-muted mb-2">
                            <i class="bi bi-person me-2"></i>@Model.Owner?.FirstName @Model.Owner?.LastName
                            <span class="mx-2">•</span>
                            <i class="bi bi-folder me-2"></i>@Model.Category?.Name
                            <span class="mx-2">•</span>
                            <i class="bi bi-calendar me-2"></i>@Model.CreatedAt.ToString("MMM dd, yyyy")
                        </p>
                    @if (Model.Tags != null && Model.Tags.Any(t => t != null && !string.IsNullOrEmpty(t.Name)))
                    {
                        <div class="d-flex flex-wrap gap-1 mb-2">
                            <i class="bi bi-tags me-2 mt-1"></i>
                            @foreach (var tag in Model.Tags.Where(t => t != null && !string.IsNullOrEmpty(t.Name)))
                            {
                                <span class="badge bg-light text-dark border">@tag.Name</span>
                            }
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="lead">@Model.Description</p>
                    }
                </div>
                <div class="ms-auto d-flex align-items-start">
                    <div class="d-flex gap-2">
                        @if (ViewBag.CanEdit == true)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                <i class="bi bi-pencil me-2"></i>Edit
                            </a>
                            <a asp-action="Create" asp-controller="Item" asp-route-inventoryId="@Model.Id" class="btn btn-primary">
                                <i class="bi bi-plus-circle me-2"></i>Add Item
                            </a>
                        }
                        else if (ViewBag.CanAddItems == true)
                        {
                            <a asp-action="Create" asp-controller="Item" asp-route-inventoryId="@Model.Id" class="btn btn-primary">
                                <i class="bi bi-plus-circle me-2"></i>Add Item
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <ul class="nav nav-tabs mb-4 mt-4" id="inventoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "items" ? "active" : "")" 
                    id="items-tab" data-bs-toggle="tab" data-bs-target="#items" 
                    type="button" role="tab" aria-controls="items" aria-selected="true">
                <i class="bi bi-box me-2"></i>Items (@(ViewBag.Items?.Count ?? 0))
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "chat" ? "active" : "")" 
                    id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat" 
                    type="button" role="tab" aria-controls="chat" aria-selected="false">
                <i class="bi bi-chat me-2"></i>Chat
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "settings" ? "active" : "")" 
                    id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings" 
                    type="button" role="tab" aria-controls="settings" aria-selected="false">
                <i class="bi bi-gear me-2"></i>Settings
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "customid" ? "active" : "")" 
                    id="customid-tab" data-bs-toggle="tab" data-bs-target="#customid" 
                    type="button" role="tab" aria-controls="customid" aria-selected="false">
                <i class="bi bi-hash me-2"></i>Custom ID
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "fields" ? "active" : "")" 
                    id="fields-tab" data-bs-toggle="tab" data-bs-target="#fields" 
                    type="button" role="tab" aria-controls="fields" aria-selected="false">
                <i class="bi bi-list-check me-2"></i>Fields
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "access" ? "active" : "")" 
                    id="access-tab" data-bs-toggle="tab" data-bs-target="#access" 
                    type="button" role="tab" aria-controls="access" aria-selected="false">
                <i class="bi bi-people me-2"></i>Access 
                @if (!Model.IsPublic)
                {
                    <span class='badge bg-primary ms-1'>Private</span>
                }
                else
                {
                    <span class='badge bg-success ms-1'>Public</span>
                }
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "stats" ? "active" : "")" 
                    id="stats-tab" data-bs-toggle="tab" data-bs-target="#stats" 
                    type="button" role="tab" aria-controls="stats" aria-selected="false">
                <i class="bi bi-graph-up me-2"></i>Stats
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "export" ? "active" : "")" 
                    id="export-tab" data-bs-toggle="tab" data-bs-target="#export" 
                    type="button" role="tab" aria-controls="export" aria-selected="false">
                <i class="bi bi-download me-2"></i>Export
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ViewBag.CurrentTab == "api" ? "active" : "")" 
                    id="api-tab" data-bs-toggle="tab" data-bs-target="#api" 
                    type="button" role="tab" aria-controls="api" aria-selected="false">
                <i class="bi bi-code-square me-2"></i>API
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="inventoryTabsContent">
        <!-- Items Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "items" ? "show active" : "")" 
             id="items" role="tabpanel" aria-labelledby="items-tab">
            
            @if (ViewBag.Items != null && ((IEnumerable<dynamic>)ViewBag.Items).Any())
            {
                <div class="mb-4"></div> <!-- Extra space before item list -->
                <div class="table-responsive">
                    <table class="table table-hover" id="itemsTable">
                        <thead>
                            <tr>
                                <th width="50">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAllItems">
                                        <label class="form-check-label" for="selectAllItems" style="visibility: hidden">Select All</label>
                                    </div>
                                </th>
                                <th>ID</th>
                                <th>Attribute</th>
                                <th>Created</th>
                                <th>Likes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ViewBag.Items)
                            {
                                <tr class="item-row" data-item-id="@item.Id">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input item-checkbox" type="checkbox" id="item-@item.Id" 
                                                   data-item-id="@item.Id">
                                            <label class="form-check-label" for="item-@item.Id" style="visibility: hidden">Select</label>
                                        </div>
                                    </td>
                                    <td><code>@item.CustomId</code></td>
                                    <td>
                                        <a href="/Item/Details/@item.Id" class="item-link" data-item-id="@item.Id">
                                            @(item.TextField1Value ?? "Unnamed item")
                                        </a>
                                    </td>
                                    <td>@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <span class="likes-count" data-item-id="@item.Id">@item.LikesCount</span>
                                        <button class="btn btn-sm btn-link like-btn p-0" 
                                                data-item-id="@item.Id" 
                                                data-authenticated="@(User.Identity?.IsAuthenticated == true ? "true" : "false")"
                                                data-bs-toggle="tooltip" 
                                                title="@(User.Identity?.IsAuthenticated == true ? (item.IsLikedByCurrentUser ? "Unlike" : "Like") : "Login to like this item")">
                                            <i class="bi bi-heart@(item.IsLikedByCurrentUser ? "-fill" : "") heart-icon"></i>
                                            <span class="visually-hidden">Like</span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="mb-4"></div> <!-- Extra space before empty state -->
                <div class="text-center py-5">
                    <i class="bi bi-box display-4 text-muted"></i>
                    <h5 class="text-muted mt-3">No items yet</h5>
                    <p class="text-muted">This inventory doesn't have any items yet.</p>
                    @if (ViewBag.CanEdit == true || ViewBag.CanAddItems == true)
                    {
                        <a asp-action="Create" asp-controller="Item" asp-route-inventoryId="@Model.Id" class="btn btn-primary">
                            <i class="bi bi-plus-circle me-2"></i>Add Your First Item
                        </a>
                    }
                </div>
            }
        </div>

        <!-- Chat Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "chat" ? "show active" : "")" 
             id="chat" role="tabpanel" aria-labelledby="chat-tab">
            <div class="card">
                <div class="card-body">
                    <h5>
                        Discussion
                        <a href="#" class="text-decoration-none ms-2 small" id="markdown-help-toggle">
                            <i class="bi bi-markdown me-1"></i>Markdown supported
                        </a>
                    </h5>
                    
                    <div id="markdown-help" class="alert alert-light border small mb-3" style="display: none;">
                        <h6>Markdown Formatting</h6>
                        <ul class="mb-0">
                            <li><code>**bold**</code> for <strong>bold text</strong></li>
                            <li><code>*italic*</code> for <em>italic text</em></li>
                            <li><code>[link](https://example.com)</code> for <a href="#">links</a></li>
                            <li><code>![alt](image-url)</code> for images</li>
                            <li><code>`code`</code> for <code>inline code</code></li>
                            <li><code>```code block```</code> for code blocks</li>
                            <li><code># Heading</code> for headings</li>
                            <li><code>- list item</code> for lists</li>
                            <li><code>> quote</code> for blockquotes</li>
                        </ul>
                    </div>
                    
                    <div id="comments-container" class="mb-3 p-2" style="max-height: 500px; overflow-y: auto; border: 1px solid #eee; border-radius: 4px;">
                        <!-- Comments will be loaded here -->
                    </div>
                    
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <div class="input-group">
                            <textarea class="form-control" id="new-comment" placeholder="Write a comment... (Markdown supported)" rows="3"></textarea>
                            <button class="btn btn-primary" type="button" id="send-comment">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                        <div class="text-end mt-1">
                            <small class="text-muted">Press Shift+Enter for a new line</small>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            Please <a href="/Auth/Login">login</a> to participate in the discussion.
                        </div>
                    }
                    @Html.AntiForgeryToken()
                </div>
            </div>
        </div>

        <!-- Settings Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "settings" ? "show active" : "")" 
             id="settings" role="tabpanel" aria-labelledby="settings-tab">
            <div class="card">
                <div class="card-body">
                    <h5>General Settings</h5>
                    <p class="text-muted">Configure inventory preferences and settings.</p>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <input type="text" class="form-control" value="@Model.Title" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <input type="text" class="form-control" value="@Model.Category?.Name" readonly>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="3" readonly>@Model.Description</textarea>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Created Date</label>
                                <input type="text" class="form-control" value="@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Last Updated</label>
                                <input type="text" class="form-control" value="@Model.UpdatedAt.ToString("MMM dd, yyyy HH:mm")" readonly>
                            </div>
                        </div>
                    </div>
                    
                    @if (ViewBag.CanEdit == true)
                    {
                        <div class="d-flex gap-2 justify-content-end">
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                                <i class="bi bi-pencil me-2"></i>Edit Settings
                            </a>
                            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                <i class="bi bi-trash me-2"></i>Delete Inventory
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Custom ID Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "customid" ? "show active" : "")" 
             id="customid" role="tabpanel" aria-labelledby="customid-tab">
            <div class="card">
                <div class="card-body">
                    <h5>Custom ID Configuration</h5>
                    <p class="text-muted">
                        You can set up items with inventory numbers in your preferred format. To create a format, add new elements, edit them, drag to reorder, or drag elements out of the form to delete them.
                    </p>
                    
                    <div class="alert alert-info mb-4">
                        <strong>Example:</strong> 
                        <div class="bg-light p-2 mt-2 border rounded custom-id-preview-wrapper">
                            <div id="custom-id-preview" class="d-inline-block">📦-A7E3A_013_2025</div>
                        </div>
                        <small class="d-block mt-1">(Supports Unicode emoji and special characters like underscores (_))</small>
                    </div>
                    
                    <div id="custom-id-elements" class="mb-3">
                        <!-- Custom ID elements will be loaded here -->
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" id="add-custom-id-element">
                            <i class="bi bi-plus-circle me-2"></i>Add element
                        </button>
                        
                        <button type="button" class="btn btn-success" id="save-custom-id-button" onclick="saveCustomIdConfiguration()">
                            <i class="bi bi-save me-2"></i>Save Configuration
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Fields Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "fields" ? "show active" : "")" 
             id="fields" role="tabpanel" aria-labelledby="fields-tab">
            <div class="card">
                <div class="card-body">
                    <h5>Custom Fields Configuration</h5>
                    <p class="text-muted">Configure custom fields for items in this inventory.</p>
                    
                    <!-- Hidden inventory ID for forms -->
                    <input type="hidden" name="InventoryId" value="@Model.Id" />
                    <div class="mb-3" data-inventory-id="@Model.Id">
                        <div class="alert alert-info">
                            <strong>Note:</strong> Add custom fields to specify what data each item in this inventory can store. 
                            Changes are automatically saved.
                        </div>
                    </div>
                    
                    <div id="custom-fields-list">
                        <!-- Custom fields will be loaded here -->
                    </div>
                    
                    <div class="mt-3">
                        <button type="button" class="btn btn-outline-primary me-2" id="add-text-field">
                            <i class="bi bi-plus-circle me-2"></i>Add Text Field
                        </button>
                        <button type="button" class="btn btn-outline-primary me-2" id="add-numeric-field">
                            <i class="bi bi-plus-circle me-2"></i>Add Numeric Field
                        </button>
                        <button type="button" class="btn btn-outline-primary me-2" id="add-boolean-field">
                            <i class="bi bi-plus-circle me-2"></i>Add Boolean Field
                        </button>
                    </div>
                    
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" id="save-fields-button">
                            <i class="bi bi-save me-2"></i>Save Fields
                        </button>
                        
                        <button type="button" class="btn btn-outline-secondary ms-2" id="reload-fields-button">
                            <i class="bi bi-arrow-clockwise me-2"></i>Reload Fields
                        </button>
                        
                        <button type="button" class="btn btn-outline-danger ms-2" id="clear-all-fields-button">
                            <i class="bi bi-trash me-2"></i>Clear All Fields
                        </button>
                        
                        <div class="alert alert-info mt-2">
                            <strong>Inventory ID:</strong> <span id="debug-inventory-id">@Model.Id</span>
                        </div>
                        
                        <div class="card mt-3" id="debug-panel">
                            <div class="card-header bg-secondary text-white">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Debug Panel</span>
                                    <button class="btn btn-sm btn-light" id="toggle-debug">Show/Hide</button>
                                </div>
                            </div>
                            <div class="card-body" id="debug-content" style="display: none;">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Current Fields:</h6>
                                        <div class="small pre-scrollable" id="debug-current-fields">
                                            No fields loaded yet
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Actions:</h6>
                                        <button type="button" class="btn btn-sm btn-outline-secondary mb-2" id="debug-show-ids">
                                            Show Field IDs
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary mb-2" id="debug-clear-fields">
                                            Clear All Fields
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-secondary mb-2" id="debug-log-fields">
                                            Log Fields to Console
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-info mb-2" id="debug-raw-db">
                                            Check Raw DB Values
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Access Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "access" ? "show active" : "")" 
             id="access" role="tabpanel" aria-labelledby="access-tab">
            <div class="card">
                <div class="card-body">
                    <h5>Access Control</h5>
                    <p class="text-muted">Manage who can access this inventory.</p>
                    
                    @Html.AntiForgeryToken()
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="isPublic" 
                               @(Model.IsPublic ? "checked" : "") disabled>
                        <label class="form-check-label" for="isPublic">
                            Public Inventory - Anyone can view this inventory
                        </label>
                    </div>
                    
                    @if (Model.IsPublic)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            This inventory is public, so anyone can access it. To manage specific user access, first make this inventory private in the Settings tab.
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Users with Access</label>
                            <div class="d-flex justify-content-end mb-2">
                                <div class="btn-group btn-group-sm" role="group" aria-label="Sort options">
                                    <button type="button" class="btn btn-primary sort-users-btn active" data-sort="name">
                                        <i class="bi bi-arrow-down-up me-1"></i>Sort by Name
                                    </button>
                                    <button type="button" class="btn btn-outline-primary sort-users-btn" data-sort="email">
                                        <i class="bi bi-arrow-down-up me-1"></i>Sort by Email
                                    </button>
                                </div>
                            </div>
                            <div id="access-users-list" class="mt-2 user-access-table">
                                <div class="text-center py-3">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="text-muted mt-2">Loading users...</p>
                                </div>
                            </div>
                        </div>
                        
                        @if (ViewBag.CanEdit == true)
                        {
                            <div id="add-user-form" class="mb-3">
                                <label class="form-label">Add a User</label>
                                <div class="position-relative search-container">
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="add-user-input" 
                                              placeholder="Start typing to search users by name or email">
                                        <button class="btn btn-primary" type="button" id="add-user-btn">
                                            <i class="bi bi-plus-circle me-2"></i>Add User
                                        </button>
                                    </div>
                                    <small class="form-text text-muted">Click in search box to see all available users</small>
                                    <div id="user-autocomplete-results" class="user-search-dropdown" style="display: none; width: 100%; top: 100%; left: 0;"></div>
                                </div>
                                
                                <!-- Hidden elements for TempData messages -->
                                @if (TempData["Success"] != null)
                                {
                                    <div id="temp-success-message" class="d-none">@TempData["Success"]</div>
                                }
                                @if (TempData["Error"] != null)
                                {
                                    <div id="temp-error-message" class="d-none">@TempData["Error"]</div>
                                }
                                @if (TempData["Info"] != null)
                                {
                                    <div id="temp-info-message" class="d-none">@TempData["Info"]</div>
                                }
                                @if (TempData["Warning"] != null)
                                {
                                    <div id="temp-warning-message" class="d-none">@TempData["Warning"]</div>
                                }
                                
                                <!-- Hidden form for direct submission -->
                                <!-- Global anti-forgery token for JS -->
                                <div id="antiforgery-container" class="d-none">
                                    @Html.AntiForgeryToken()
                                </div>
                                
                                <!-- Hidden form for direct submission -->
                                <form id="direct-access-form" method="post" action="/Access/GrantAccess" style="display:none;">
                                    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken().ToString()" />
                                    <input type="hidden" name="inventoryId" value="@Model.Id">
                                    <input type="hidden" name="userEmail" id="direct-email-input">
                                    <input type="hidden" name="permission" value="1"> <!-- Write permission -->
                                </form>
                            </div>
                        }
                        
                        <div id="access-status" class="alert @(TempData["Success"] != null ? "alert-success" : 
                                        TempData["Error"] != null ? "alert-danger" : 
                                        TempData["Info"] != null ? "alert-info" : 
                                        TempData["Warning"] != null ? "alert-warning" : "d-none")">
                            @(TempData["Success"] ?? TempData["Error"] ?? TempData["Info"] ?? TempData["Warning"] ?? "")
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Stats Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "stats" ? "show active" : "")" 
             id="stats" role="tabpanel" aria-labelledby="stats-tab">
            <div class="card">
                <div class="card-body">
                    <h5>Inventory Statistics</h5>
                    <p class="text-muted">Analytics and statistics for this inventory.</p>
                    
                    <div class="row">
                        <div class="col-md-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body text-center">
                                    <h3>@(ViewBag.Items?.Count ?? 0)</h3>
                                    <p class="mb-0">Total Items</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h3>@(ViewBag.TotalLikes ?? 0)</h3>
                                    <p class="mb-0">Total Likes</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h3>@(ViewBag.Comments?.Count ?? 0)</h3>
                                    <p class="mb-0">Comments</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <h3>@Model.CreatedAt.ToString("MMM yyyy")</h3>
                                    <p class="mb-0">Created</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Export Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "export" ? "show active" : "")" 
             id="export" role="tabpanel" aria-labelledby="export-tab">
            <div class="card">
                <div class="card-body">
                    <h5>Export Data</h5>
                    <p class="text-muted">Export inventory data in various formats.</p>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6>Export Items</h6>
                                    <p class="text-muted">Export all items in this inventory</p>
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-outline-primary" onclick="exportData('csv')">
                                            <i class="bi bi-file-earmark-text me-2"></i>Export as CSV
                                        </button>
                                        <button class="btn btn-outline-primary" onclick="exportData('excel')">
                                            <i class="bi bi-file-earmark-excel me-2"></i>Export as Excel
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6>Export Settings</h6>
                                    <p class="text-muted">Export inventory configuration</p>
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-outline-secondary" onclick="exportSettings('json')">
                                            <i class="bi bi-file-earmark-code me-2"></i>Export as JSON
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- API Tab -->
        <div class="tab-pane fade @(ViewBag.CurrentTab == "api" ? "show active" : "")" 
             id="api" role="tabpanel" aria-labelledby="api-tab">
            <div class="card">
                <div class="card-body">
                    <h5>API Access</h5>
                    <p class="text-muted">Manage API access to this inventory for external applications like Odoo.</p>
                    
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        External applications can use this API token to access inventory data through our API.
                    </div>
                    
                    <div class="mb-4" id="api-token-section">
                        <label class="form-label">API Token</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="api-token" placeholder="No token generated yet" 
                                   value="@ViewBag.ApiToken" readonly>
                            <button class="btn btn-primary" type="button" id="generate-token-btn" onclick="generateApiToken(@Model.Id)">
                                <i class="bi bi-key me-2"></i>Generate New Token
                            </button>
                            <button class="btn btn-outline-secondary" type="button" id="copy-token-btn" onclick="copyApiToken()">
                                <i class="bi bi-clipboard me-2"></i>Copy
                            </button>
                        </div>
                        <div class="form-text text-warning" id="token-warning" style="display: none;">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Generating a new token will invalidate any existing token.
                        </div>
                    </div>
                    
                    <h5 class="mt-4">API Endpoints</h5>
                    <p class="text-muted">Use these endpoints to access inventory data programmatically.</p>
                    
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Endpoint</th>
                                    <th>Description</th>
                                    <th>Method</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><code>/api/InventoryApi/info?token={token}</code></td>
                                    <td>Get basic inventory information</td>
                                    <td><span class="badge bg-success">GET</span></td>
                                </tr>
                                <tr>
                                    <td><code>/api/InventoryApi/aggregated?token={token}</code></td>
                                    <td>Get aggregated inventory data (field statistics, etc.)</td>
                                    <td><span class="badge bg-success">GET</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <h5 class="mt-4">Example Usage (Curl)</h5>
                    <div class="bg-dark text-light p-3 rounded mb-3">
                        <pre id="api-curl-example" class="mb-0"><code>curl -X GET "https://yourdomain.com/api/InventoryApi/info?token=YOUR_TOKEN_HERE"</code></pre>
                    </div>
                    
                    <h5 class="mt-4">Example Usage (Python)</h5>
                    <div class="bg-dark text-light p-3 rounded">
                        <pre id="api-python-example" class="mb-0"><code>import requests

token = "YOUR_TOKEN_HERE"
url = "https://yourdomain.com/api/InventoryApi/aggregated"

response = requests.get(url, params={"token": token})
data = response.json()

print(data)</code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Selection Toolbar -->
<div class="selection-toolbar hide shadow" id="selectionToolbar">
    <div class="d-flex align-items-center gap-3">
        <div class="d-flex align-items-center">
            <span class="selection-count badge bg-light" id="selectedCount">0</span>
            <span class="ms-2">items selected</span>
        </div>
        <div class="btn-group">
            <button type="button" class="btn btn-light single-item-action disabled" id="editSelectedBtn" 
                    data-bs-toggle="tooltip" title="Edit selected item">
                <i class="bi bi-pencil"></i>
            </button>
            <button type="button" class="btn btn-light single-item-action disabled" id="viewSelectedBtn"
                    data-bs-toggle="tooltip" title="View selected item">
                <i class="bi bi-eye"></i>
            </button>
            <button type="button" class="btn btn-light" id="duplicateSelectedBtn"
                    data-bs-toggle="tooltip" title="Duplicate selected items">
                <i class="bi bi-copy"></i>
            </button>
            <button type="button" class="btn btn-light text-danger" id="deleteSelectedBtn"
                    data-bs-toggle="tooltip" title="Delete selected items">
                <i class="bi bi-trash"></i>
            </button>
        </div>
        <button type="button" class="btn btn-light" id="clearSelectionBtn"
                data-bs-toggle="tooltip" title="Clear selection">
            <i class="bi bi-x"></i>
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (ViewBag.CanEdit == true)
{
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Inventory</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete "<strong>@Model.Title</strong>"?</p>
                    <p class="text-danger">This action cannot be undone and will permanently remove the inventory and all its items.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: inline;">
                        <button type="submit" class="btn btn-danger">Delete Inventory</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<!-- Item Details Modal -->
<div class="modal fade" id="itemDetailsModal" tabindex="-1" aria-labelledby="itemDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="itemDetailsModalLabel">Item Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="itemDetailsModalBody">
                <!-- Content will be loaded here via AJAX -->
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading item details...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="editItemModalBtn">
                    <i class="bi bi-pencil me-1"></i>Edit
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Like button handler -->
    <script src="~/js/like-handler.js"></script>
    <!-- Modal initialization script - load BEFORE inventory-detail.js -->
    <script src="~/js/modal-init.js"></script>
    <script src="~/js/inventory-detail.js"></script>
    <script src="~/js/custom-fields-manager.js"></script>
    <!-- Using only direct-access.js for simpler access control implementation -->
    <script src="~/js/direct-access.js"></script>
    <!-- Simple autocomplete as backup -->
    <script src="~/js/simple-autocomplete.js"></script>
    <!-- Markdown parser for chat -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Chat functionality -->
    <script src="~/js/chat.js"></script>
    <!-- jQuery UI is not available, using our own implementation -->
    <script>
        // Wait for jQuery to be fully loaded
        $(function() {
            console.log("jQuery ready in Details view");
            
            // Store inventory ID in a global variable for easy access
            window.currentInventoryId = @Model.Id;
            console.log("Current inventory ID set to:", window.currentInventoryId);
            
            // Remove any conflicting handlers from site.js
            $('#add-text-field').off('click');
            $('#add-numeric-field').off('click');
            $('#add-boolean-field').off('click');
            $('#save-fields-button').off('click');
            $('#reload-fields-button').off('click');
            $('#clear-all-fields-button').off('click');
            
            // Initialize custom fields manager with the inventory ID
            initCustomFieldsManager(window.currentInventoryId);
            
            // Special handling for custom ID preview to ensure underscores and emojis display properly
            const previewElement = document.getElementById('custom-id-preview');
            if (previewElement) {
                // Apply special style to ensure unicode characters render correctly
                previewElement.style.fontFamily = 'monospace';
                previewElement.style.whiteSpace = 'pre';
                previewElement.style.wordBreak = 'keep-all';
                
                // Force a repaint to ensure special characters display properly
                setTimeout(() => {
                    // If there are underscores in the preview, ensure they're displayed
                    const content = previewElement.textContent;
                    if (content && content.includes('_')) {
                        console.log("Detected underscores in initial preview, ensuring display");
                        // Force a redraw with a pre element
                        previewElement.innerHTML = `<pre style="margin: 0; font-family: inherit; display: inline;">${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>`;
                    }
                }, 500);
            }
            
            // Direct handler for add element button in custom ID tab
            $(document).on('click', '#add-custom-id-element', function(e) {
                console.log("Add custom ID element button clicked directly");
                e.preventDefault();
                addCustomIdElement();
                return false;
            });
            
            // Direct handler for save custom ID button
            $(document).on('click', '#save-custom-id-button', function(e) {
                console.log("Save custom ID button clicked directly");
                e.preventDefault();
                saveCustomIdDirectly();
                return false;
            });
            
            // Load custom ID elements if on that tab
            if ($("#customid").hasClass("active")) {
                console.log("Custom ID tab is active on initial page load");
                setTimeout(() => loadCustomIdElements(window.currentInventoryId), 300);
            }
            
            // Handle tab changes for custom ID (using Bootstrap's tab show event)
            $('button[data-bs-toggle="tab"][data-bs-target="#customid"]').on('shown.bs.tab', function (e) {
                console.log("Custom ID tab shown via Bootstrap tab event");
                loadCustomIdElements(window.currentInventoryId);
            });
            
            // Handle tab changes for custom ID (direct click as fallback)
            $('#customid-tab').on('click', function() {
                console.log("Custom ID tab clicked directly");
                setTimeout(() => loadCustomIdElements(window.currentInventoryId), 300);
            });
            
            // Handle tab changes for access tab
            $('button[data-bs-toggle="tab"][data-bs-target="#access"]').on('shown.bs.tab', function (e) {
                console.log("Access tab shown via Bootstrap tab event");
                loadAccessUsers();
            });
            
            // Initialize the page
            initializeInventoryPage(window.currentInventoryId);
            
            // Initialize chat functionality
            initializeChat(window.currentInventoryId);
            
            // Force reload of custom ID elements if we're on that tab
            if (@(ViewBag.CurrentTab == "customid" ? "true" : "false")) {
                console.log("Custom ID tab is the current tab from ViewBag");
                setTimeout(() => loadCustomIdElements(window.currentInventoryId), 500);
            }
            
            // Force reload of access users if we're on that tab
            if (@(ViewBag.CurrentTab == "access" ? "true" : "false")) {
                console.log("Access tab is the current tab from ViewBag");
                setTimeout(() => loadAccessUsers(), 500);
            }
            
            // Initialize API token functionality
            loadApiToken(@Model.Id);
        });
        
        // Function to load the API token
        function loadApiToken(inventoryId) {
            // Get the current token for this inventory
            fetch(`/api/InventoryApi/get-token/${inventoryId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.token) {
                        // Display the token
                        document.getElementById('api-token').value = data.token;
                        
                        // Update examples
                        updateApiExamples(data.token);
                    }
                })
                .catch(err => {
                    console.error('Error loading API token:', err);
                });
        }
        
        // Function to generate a new API token
        function generateApiToken(inventoryId) {
            // Show confirmation if a token already exists
            const currentToken = document.getElementById('api-token').value;
            if (currentToken && currentToken !== "No token generated yet") {
                if (!confirm("This will invalidate the existing token. Are you sure?")) {
                    return;
                }
            }
            
            // Generate new token
            fetch(`/api/InventoryApi/generate-token/${inventoryId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.token) {
                        document.getElementById('api-token').value = data.token;
                        document.getElementById('token-warning').style.display = 'none';
                        
                        // Show success message
                        alert('New API token generated successfully!');
                        
                        // Update examples
                        updateApiExamples(data.token);
                    } else {
                        alert('Error: ' + (data.error || 'Failed to generate token'));
                    }
                })
                .catch(err => {
                    console.error('Error generating API token:', err);
                    alert('Error generating token. Please try again.');
                });
        }
        
        // Function to copy the API token to clipboard
        function copyApiToken() {
            const tokenInput = document.getElementById('api-token');
            if (!tokenInput.value || tokenInput.value === "No token generated yet") {
                alert('No token to copy. Please generate a token first.');
                return;
            }
            
            // Copy to clipboard
            tokenInput.select();
            document.execCommand('copy');
            
            // Show success message
            alert('API token copied to clipboard!');
        }
        
        // Function to update API examples with the current token
        function updateApiExamples(token) {
            if (!token) return;
            
            // Get the hostname dynamically
            const hostname = window.location.origin;
            
            // Update curl example
            const curlExample = document.getElementById('api-curl-example');
            if (curlExample) {
                curlExample.innerHTML = `<code>curl -X GET "${hostname}/api/InventoryApi/info?token=${token}"</code>`;
            }
            
            // Update Python example
            const pythonExample = document.getElementById('api-python-example');
            if (pythonExample) {
                pythonExample.innerHTML = `<code>import requests

token = "${token}"
url = "${hostname}/api/InventoryApi/aggregated"

response = requests.get(url, params={"token": token})
data = response.json()

print(data)</code>`;
            }
        }
        
        // Function to add a custom ID element
        function addCustomIdElement() {
            console.log("addCustomIdElement function called");
            const container = document.getElementById('custom-id-elements');
            const elementId = 'element-' + Date.now();
            
            const elementHtml = `
                <div class="custom-id-element field-item" draggable="true" data-element-id="${elementId}">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <div class="drag-handle">
                                <i class="bi bi-grip-vertical"></i>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select element-type" data-element-id="${elementId}">
                                <option value="fixed">Fixed</option>
                                <option value="20-bit random">20-bit random</option>
                                <option value="32-bit random">32-bit random</option>
                                <option value="6-digit random">6-digit random</option>
                                <option value="9-digit random">9-digit random</option>
                                <option value="guid">GUID</option>
                                <option value="date/time">Date/time</option>
                                <option value="sequence">Sequence</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="form-control element-value" 
                                   placeholder="Text (can include _, emoji, etc)" 
                                   data-element-id="${elementId}"
                                   onchange="updateCustomIdPreview()">
                        </div>
                        <div class="col-md-3">
                            <div class="d-flex gap-1">
                                <button class="btn btn-sm btn-outline-info help-btn" data-bs-toggle="tooltip" title="Help">
                                    <i class="bi bi-question-circle"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger remove-element" data-element-id="${elementId}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="element-description mt-2 text-muted small"></div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', elementHtml);
            
            // Initialize description right away
            const typeSelect = document.querySelector(`[data-element-id="${elementId}"].element-type`);
            const descriptionDiv = document.querySelector(`[data-element-id="${elementId}"] .element-description`);
            if (typeSelect && descriptionDiv) {
                // Show description for Fixed type by default
                descriptionDiv.textContent = 'A piece of unchanging text. Supports any characters including underscores, dashes, and Unicode emoji (📦, 🔑, etc).';
            }
            
            updateCustomIdPreview();
            initializeElementEventListeners(elementId);
        }
        
        // Function to initialize event listeners for a custom ID element
        function initializeElementEventListeners(elementId) {
            const typeSelect = document.querySelector(`[data-element-id="${elementId}"].element-type`);
            const valueInput = document.querySelector(`[data-element-id="${elementId}"].element-value`);
            const removeBtn = document.querySelector(`[data-element-id="${elementId}"].remove-element`);
            
            if (typeSelect) {
                typeSelect.addEventListener('change', function() {
                    // Update placeholder based on type
                    if (valueInput) {
                        if (typeSelect.value === 'fixed') {
                            valueInput.placeholder = 'Text (can include _, emoji, etc)';
                        } else if (typeSelect.value === 'sequence') {
                            valueInput.placeholder = 'Format (e.g., D3)';
                        } else if (typeSelect.value === 'date/time') {
                            valueInput.placeholder = 'Format (e.g., yyyy)';
                        } else {
                            valueInput.placeholder = 'Format or text';
                        }
                    }
                    
                    updateElementDescription(elementId);
                    updateCustomIdPreview();
                });
                
                // Set initial placeholder
                if (valueInput && typeSelect.value === 'fixed') {
                    valueInput.placeholder = 'Text (can include _, emoji, etc)';
                }
            }
            
            if (valueInput) {
                valueInput.addEventListener('input', updateCustomIdPreview);
            }
            
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    removeCustomIdElement(elementId);
                });
            }
            
            updateElementDescription(elementId);
        }
        
        // Function to update element description based on type
        function updateElementDescription(elementId) {
            const typeSelect = document.querySelector(`[data-element-id="${elementId}"].element-type`);
            const descriptionDiv = document.querySelector(`[data-element-id="${elementId}"] .element-description`);
            
            if (!typeSelect || !descriptionDiv) return;
            
            const descriptions = {
                'fixed': 'A piece of unchanging text. Supports any characters including underscores, dashes, and Unicode emoji (📦, 🔑, etc).',
                '20-bit random': 'A random value. E.g., you can format it as a six-digit decimal (D6) or 5-digit hex (X5).',
                '32-bit random': 'A random value. E.g., you can format it as a six-digit decimal (D6) or 5-digit hex (X5).',
                '6-digit random': 'A random value. E.g., you can format it as a six-digit decimal (D6) or 5-digit hex (X5).',
                '9-digit random': 'A random value. E.g., you can format it as a six-digit decimal (D6) or 5-digit hex (X5).',
                'guid': 'A globally unique identifier.',
                'date/time': 'An item creation date and time. E.g., you can use an abbreviated day of the week (ddd).',
                'sequence': 'A sequential index. E.g., you can format it with leading zeros (D4) or without them (D).'
            };
            
            descriptionDiv.textContent = descriptions[typeSelect.value] || '';
        }
        
        // Function to remove a custom ID element
        function removeCustomIdElement(elementId) {
            const element = document.querySelector(`.custom-id-element[data-element-id="${elementId}"]`);
            if (element) {
                element.remove();
                updateCustomIdPreview();
            }
        }
        
        // Function to get custom ID elements for saving
        function getCustomIdElements() {
            const elements = [];
            const elementDivs = document.querySelectorAll('.custom-id-element');
            
            elementDivs.forEach((div, index) => {
                const elementId = div.getAttribute('data-element-id');
                const typeSelect = div.querySelector('.element-type');
                const valueInput = div.querySelector('.element-value');
                
                if (typeSelect && valueInput) {
                    elements.push({
                        id: elementId,
                        type: typeSelect.value,
                        value: valueInput.value,
                        order: index
                    });
                }
            });
            
            return elements;
        }
        
        // Function to update custom ID preview
        function updateCustomIdPreview() {
            const elements = getCustomIdElements();
            const previewElement = document.getElementById('custom-id-preview');
            
            if (!previewElement) return;
            
            // If no elements, show placeholder
            if (elements.length === 0) {
                previewElement.textContent = '(Preview will appear here)';
                return;
            }
            
            // Show loading indicator
            previewElement.textContent = 'Generating preview...';
            
            // Debug - log the elements being sent
            console.log("Sending elements to preview:", JSON.stringify(elements));
            
            // Generate preview using the current elements
            fetch('/Inventory/GenerateAdvancedCustomIdPreview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ elements: elements })
            })
            .then(response => response.json())
            .then(data => {
                console.log("Preview response:", data);
                // Use textContent to preserve all characters including underscores and emoji
                previewElement.textContent = data.preview || 'Invalid format';
            })
            .catch(err => {
                console.error('Error generating preview:', err);
                previewElement.textContent = 'Error generating preview';
            });
        }
        
        // Direct save function for custom ID
        function saveCustomIdDirectly() {
            console.log("saveCustomIdDirectly called");
            const inventoryId = window.currentInventoryId;
            console.log("Using inventory ID:", inventoryId);
            
            if (!inventoryId) {
                alert("ERROR: Could not determine inventory ID!");
                return;
            }
            
            const elements = getCustomIdElements();
            console.log("Elements to save:", elements);
            
            // Additional debug for fixed elements with underscores
            elements.forEach(elem => {
                if (elem.type === 'fixed') {
                    console.log(`Fixed element ${elem.id} value: "${elem.value}"`);
                    
                    // Explicitly check for underscore
                    if (elem.value.includes('_')) {
                        console.log('UNDERSCORE DETECTED in element value: ' + elem.id);
                    }
                    
                    console.log(`Characters:`, Array.from(elem.value).map(c => c + ' (' + c.charCodeAt(0).toString(16) + ')').join(', '));
                }
            });
            
            // Build the request payload
            const payload = { 
                inventoryId: parseInt(inventoryId), 
                elements: elements 
            };
            
            console.log("Sending payload:", JSON.stringify(payload));
            
            // Send the request directly
            $.ajax({
                url: '/Inventory/SaveCustomIdConfiguration',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function(response) {
                    console.log("Save response:", response);
                    if (response.success) {
                        alert("Custom ID configuration saved successfully!");
                        window.location.reload(); // Reload to verify persistence
                    } else {
                        alert("Error saving custom ID configuration: " + (response.error || "Unknown error"));
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Ajax error:", error);
                    console.error("Status:", status);
                    console.error("Response:", xhr.responseText);
                    alert("Error saving custom ID configuration. See console for details.");
                }
            });
        }
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/inventory-detail.css" />
    <link rel="stylesheet" href="~/css/custom-fields.css" />
    <link rel="stylesheet" href="~/css/tags.css" />
    <link rel="stylesheet" href="~/css/access-control.css" />
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
    <!-- jQuery UI is not available, using Bootstrap styles -->
    <style>
        /* User search dropdown styles */
        .search-container {
            position: relative;
            width: 100%;
        }
        
        .user-search-dropdown {
            position: absolute;
            z-index: 1050; /* Higher z-index to ensure it's above other elements */
            background: white;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            max-height: 250px;
            overflow-y: auto;
            width: 100%; /* Full width of parent container */
            margin-top: 2px;
            left: 0;
            top: 100%; /* Position directly below the input */
        }
        
        .user-search-dropdown .user-item {
            padding: 8px 12px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            display: flex !important; /* Ensure flex display is maintained */
        }
        
        .user-search-dropdown .user-item:last-child {
            border-bottom: none;
        }
        
        .user-search-dropdown .user-item:hover {
            background-color: #f5f5f5;
        }
        
        /* User access table styles */
        .user-access-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .user-access-table th {
            background-color: #f8f9fa;
            position: sticky;
            top: 0;
            padding: 8px;
            border-bottom: 2px solid #dee2e6;
        }
        
        .user-access-table td {
            padding: 8px;
            vertical-align: middle;
            border-bottom: 1px solid #dee2e6;
        }
        
        /* Sort button styles */
        .sort-users-btn {
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
        }
        
        .sort-users-btn.active {
            background-color: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }
        
        .sort-users-btn:not(.active) {
            background-color: transparent;
            color: #0d6efd;
        }
        
        /* Highlight newly added users */
        .highlight-row {
            animation: highlight 2s ease-in-out;
        }
        
        @@keyframes highlight {
            0% {
                background-color: rgba(255, 248, 220, 0.5);
            }
            50% {
                background-color: rgba(255, 248, 220, 1);
            }
            100% {
                background-color: transparent;
            }
        }
    </style>
}

