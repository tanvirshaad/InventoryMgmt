@model IEnumerable<InventoryMgmt.BLL.DTOs.UserDto>

@{
    ViewData["Title"] = "User Management";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h2>User Management</h2>
            
            @Html.AntiForgeryToken()
            
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <!-- Selection Toolbar -->
            <div class="selection-toolbar hide shadow" id="selectionToolbar">
                <div class="d-flex align-items-center gap-3">
                    <div class="d-flex align-items-center">
                        <span class="selection-count badge bg-light text-dark" id="selectedCount">0</span>
                        <span class="ms-2">users selected</span>
                    </div>
                    <div class="btn-group" id="multiActionButtons">
                        <!-- Shown when multiple users selected -->
                        <button type="button" class="btn btn-warning multi-action" id="blockSelectedBtn"
                                data-bs-toggle="tooltip" title="Block selected users">
                            <i class="fas fa-lock"></i> Block
                        </button>
                        <button type="button" class="btn btn-success multi-action" id="unblockSelectedBtn"
                                data-bs-toggle="tooltip" title="Unblock selected users">
                            <i class="fas fa-unlock"></i> Unblock
                        </button>
                        <button type="button" class="btn btn-info multi-action" id="makeAdminSelectedBtn"
                                data-bs-toggle="tooltip" title="Make selected users admins" 
                                data-action="make-admin">
                            <i class="fas fa-user-shield"></i> Make Admin
                        </button>
                        <button type="button" class="btn btn-secondary multi-action" id="removeAdminSelectedBtn"
                                data-bs-toggle="tooltip" title="Remove admin role from selected users"
                                data-action="remove-admin">
                            <i class="fas fa-user"></i> Remove Admin
                        </button>
                        <button type="button" class="btn btn-danger multi-action" id="deleteSelectedBtn"
                                data-bs-toggle="tooltip" title="Delete selected users">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                    <div class="btn-group" id="singleActionButtons" style="display: none;">
                        <!-- Single user action buttons (shown when only one user selected) -->
                        <button type="button" class="btn btn-warning single-action" id="singleBlockBtn">
                            <i class="fas fa-lock"></i> Block
                        </button>
                        <button type="button" class="btn btn-success single-action" id="singleUnblockBtn" style="display: none;">
                            <i class="fas fa-unlock"></i> Unblock
                        </button>
                        <button type="button" class="btn btn-info single-action" id="singleMakeAdminBtn">
                            <i class="fas fa-user-shield"></i> Make Admin
                        </button>
                        <button type="button" class="btn btn-secondary single-action" id="singleRemoveAdminBtn" style="display: none;">
                            <i class="fas fa-user"></i> Remove Admin
                        </button>
                        <button type="button" class="btn btn-danger single-action" id="singleDeleteBtn">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                    <button type="button" class="btn btn-light" id="clearSelectionBtn"
                            data-bs-toggle="tooltip" title="Clear selection">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>All Users</h4>
                    <div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAllUsers">
                            <label class="form-check-label" for="selectAllUsers">Select All</label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="usersTable">
                            <thead class="table-dark">
                                <tr>
                                    <th width="40px"></th>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Username</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Last Login</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model)
                                {
                                    <tr class="@(user.IsBlocked ? "table-warning" : "")" data-user-id="@user.Id">
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input user-select-checkbox" 
                                                       type="checkbox" 
                                                       id="user-@user.Id" 
                                                       data-user-id="@user.Id">
                                            </div>
                                        </td>
                                        <td>@user.Id</td>
                                        <td>@user.FirstName @user.LastName</td>
                                        <td>@user.Email</td>
                                        <td>@user.UserName</td>
                                        <td>
                                            <span class="badge @(user.Role == "Admin" ? "bg-danger" : "bg-primary")">
                                                @user.Role
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @(user.IsBlocked ? "bg-warning" : "bg-success")">
                                                @(user.IsBlocked ? "Blocked" : "Active")
                                            </span>
                                        </td>
                                        <td>@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        <td>@user.LastLoginAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .table-responsive {
        max-height: 600px;
        overflow-y: auto;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .badge {
        font-size: 0.8em;
        padding: 0.4em 0.6em;
    }
    
    /* Badge colors to match screenshot */
    .badge.bg-danger {
        background-color: #dc3545 !important;
    }
    
    .badge.bg-primary {
        background-color: #0d6efd !important;
    }
    
    .badge.bg-warning {
        background-color: #ffc107 !important;
        color: #212529 !important;
    }
    
    .badge.bg-success {
        background-color: #198754 !important;
    }
    
    /* Button styles to match screenshot */
    .btn-warning {
        background-color: #f4b400;
        border-color: #f4b400;
        color: #212529;
    }
    
    .btn-info {
        background-color: #4285f4;
        border-color: #4285f4;
        color: white;
    }
    
    .btn-danger {
        background-color: #db4437;
        border-color: #db4437;
    }
    
    .btn-secondary {
        background-color: #5f6368;
        border-color: #5f6368;
    }
    
    .btn-success {
        background-color: #0f9d58;
        border-color: #0f9d58;
    }
    
    /* Selection toolbar styles */
    .selection-toolbar {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #fff;
        padding: 10px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        transition: all 0.3s ease;
    }
    
    .selection-toolbar.hide {
        transform: translate(-50%, 100px);
        opacity: 0;
        pointer-events: none;
    }
    
    .selection-toolbar .selection-count {
        font-size: 1.1rem;
        font-weight: bold;
    }
    
    /* Row selection styles */
    tr.selected {
        background-color: #e9f5ff !important;
    }
    
    tr.selected td {
        border-color: #b8daff;
    }
    
    /* Checkbox styles */
    .form-check-input:checked {
        background-color: #4285f4;
        border-color: #4285f4;
    }
    
    #usersTable tbody tr {
        cursor: pointer;
    }
    
    /* Table styles to match screenshot */
    .table-dark {
        background-color: #202124;
    }
    
    .table>:not(caption)>*>* {
        padding: 0.75rem;
        border-bottom-width: 1px;
    }
</style>

<!-- AJAX Form Submission Script -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
        
        // Track selected users
        const selectedUsers = new Set();
        
        // Handle row selection
        $('#usersTable tbody tr').click(function(e) {
            // Ignore if the click was on a button or a form element
            if ($(e.target).closest('button, .form-check, .form-check-input').length > 0) {
                return;
            }
            
            const userId = $(this).data('user-id');
            const checkbox = $(this).find('.user-select-checkbox');
            
            // Toggle checkbox state
            checkbox.prop('checked', !checkbox.prop('checked'));
            
            // Trigger the change event manually
            checkbox.trigger('change');
        });
        
        // Handle checkbox change
        $('.user-select-checkbox').change(function() {
            const userId = $(this).data('user-id');
            const isChecked = $(this).prop('checked');
            const row = $(this).closest('tr');
            
            if (isChecked) {
                selectedUsers.add(userId);
                row.addClass('selected');
            } else {
                selectedUsers.delete(userId);
                row.removeClass('selected');
            }
            
            // Update selection count and toolbar visibility
            updateSelectionToolbar();
            
            // Update "select all" checkbox
            updateSelectAllCheckbox();
        });
        
        // Select All checkbox
        $('#selectAllUsers').change(function() {
            const isChecked = $(this).prop('checked');
            
            $('.user-select-checkbox').each(function() {
                $(this).prop('checked', isChecked);
                
                const userId = $(this).data('user-id');
                const row = $(this).closest('tr');
                
                if (isChecked) {
                    selectedUsers.add(userId);
                    row.addClass('selected');
                } else {
                    selectedUsers.delete(userId);
                    row.removeClass('selected');
                }
            });
            
            updateSelectionToolbar();
        });
        
        // Clear selection button
        $('#clearSelectionBtn').click(function() {
            clearSelection();
        });
        
        // Block selected users
        $('#blockSelectedBtn').click(function() {
            if (selectedUsers.size === 0) return;
            
            showConfirmDialog(
                'Block Users',
                `Are you sure you want to block ${selectedUsers.size} user(s)?`,
                function() {
                    performBulkAction('BlockUsers', Array.from(selectedUsers));
                }
            );
        });
        
        // Unblock selected users
        $('#unblockSelectedBtn').click(function() {
            if (selectedUsers.size === 0) return;
            
            showConfirmDialog(
                'Unblock Users',
                `Are you sure you want to unblock ${selectedUsers.size} user(s)?`,
                function() {
                    performBulkAction('UnblockUsers', Array.from(selectedUsers));
                }
            );
        });
        
        // Make selected users admins
        $('#makeAdminSelectedBtn').click(function() {
            if (selectedUsers.size === 0) return;
            
            showConfirmDialog(
                'Make Admin',
                `Are you sure you want to make ${selectedUsers.size} user(s) admins?`,
                function() {
                    performBulkAction('PromoteUsersToAdmin', Array.from(selectedUsers));
                }
            );
        });
        
        // Remove admin from selected users
        $('#removeAdminSelectedBtn').click(function() {
            if (selectedUsers.size === 0) return;
            
            showConfirmDialog(
                'Remove Admin Role',
                `Are you sure you want to remove admin role from ${selectedUsers.size} user(s)?`,
                function() {
                    performBulkAction('RemoveUsersAdmin', Array.from(selectedUsers));
                }
            );
        });
        
        // Delete selected users
        $('#deleteSelectedBtn').click(function() {
            if (selectedUsers.size === 0) return;
            
            showConfirmDialog(
                'Delete Users',
                `WARNING: Are you sure you want to permanently delete ${selectedUsers.size} user(s)? This action cannot be undone.`,
                function() {
                    performBulkAction('DeleteUsers', Array.from(selectedUsers));
                }
            );
        });
        
        // Single user action buttons
        $('#singleBlockBtn').click(function() {
            if (selectedUsers.size !== 1) return;
            
            const userId = Array.from(selectedUsers)[0];
            const userName = $(`tr[data-user-id="${userId}"]`).find('td:nth-child(3)').text().trim();
            
            showConfirmDialog(
                'Block User',
                `Are you sure you want to block user "${userName}"?`,
                function() {
                    performAction('BlockUser', userId);
                }
            );
        });
        
        $('#singleUnblockBtn').click(function() {
            if (selectedUsers.size !== 1) return;
            
            const userId = Array.from(selectedUsers)[0];
            const userName = $(`tr[data-user-id="${userId}"]`).find('td:nth-child(3)').text().trim();
            
            showConfirmDialog(
                'Unblock User',
                `Are you sure you want to unblock user "${userName}"?`,
                function() {
                    performAction('UnblockUser', userId);
                }
            );
        });
        
        $('#singleMakeAdminBtn').click(function() {
            if (selectedUsers.size !== 1) return;
            
            const userId = Array.from(selectedUsers)[0];
            const userName = $(`tr[data-user-id="${userId}"]`).find('td:nth-child(3)').text().trim();
            
            showConfirmDialog(
                'Make Admin',
                `Are you sure you want to promote user "${userName}" to admin?`,
                function() {
                    performAction('PromoteToAdmin', userId);
                }
            );
        });
        
        $('#singleRemoveAdminBtn').click(function() {
            if (selectedUsers.size !== 1) return;
            
            const userId = Array.from(selectedUsers)[0];
            const userName = $(`tr[data-user-id="${userId}"]`).find('td:nth-child(3)').text().trim();
            
            showConfirmDialog(
                'Remove Admin',
                `Are you sure you want to remove admin role from user "${userName}"?`,
                function() {
                    performAction('RemoveAdmin', userId);
                }
            );
        });
        
        $('#singleDeleteBtn').click(function() {
            if (selectedUsers.size !== 1) return;
            
            const userId = Array.from(selectedUsers)[0];
            const userName = $(`tr[data-user-id="${userId}"]`).find('td:nth-child(3)').text().trim();
            
            showConfirmDialog(
                'Delete User',
                `WARNING: Are you sure you want to permanently delete user "${userName}"? This action cannot be undone.`,
                function() {
                    performAction('DeleteUser', userId);
                }
            );
        });
        
        // Helper function to update selection toolbar
        function updateSelectionToolbar() {
            const count = selectedUsers.size;
            $('#selectedCount').text(count);
            
            if (count > 0) {
                $('#selectionToolbar').removeClass('hide');
                
                // Check selected users' properties
                let hasBlockedUser = false;
                let hasUnblockedUser = false;
                let hasAdminUser = false;
                let hasNonAdminUser = false;
                
                // Check each selected user's status and role
                selectedUsers.forEach(userId => {
                    const userRow = $(`tr[data-user-id="${userId}"]`);
                    const isBlocked = userRow.find('.badge:contains("Blocked")').length > 0;
                    const isAdmin = userRow.find('.badge:contains("Admin")').length > 0;
                    
                    if (isBlocked) {
                        hasBlockedUser = true;
                    } else {
                        hasUnblockedUser = true;
                    }
                    
                    if (isAdmin) {
                        hasAdminUser = true;
                    } else {
                        hasNonAdminUser = true;
                    }
                });
                
                // Show appropriate action buttons based on selection count
                if (count === 1) {
                    // Show single user actions
                    $('#multiActionButtons').hide();
                    $('#singleActionButtons').show();
                    
                    // Get the single selected user
                    const userId = Array.from(selectedUsers)[0];
                    const userRow = $(`tr[data-user-id="${userId}"]`);
                    
                    // Update button visibility based on user status
                    if (hasBlockedUser) {
                        $('#singleBlockBtn').hide();
                        $('#singleUnblockBtn').show();
                    } else {
                        $('#singleBlockBtn').show();
                        $('#singleUnblockBtn').hide();
                    }
                    
                    if (hasAdminUser) {
                        $('#singleMakeAdminBtn').hide();
                        $('#singleRemoveAdminBtn').show();
                    } else {
                        $('#singleMakeAdminBtn').show();
                        $('#singleRemoveAdminBtn').hide();
                    }
                } else {
                    // Show multi-user actions
                    $('#multiActionButtons').show();
                    $('#singleActionButtons').hide();
                    
                    // Show/hide block/unblock buttons based on selection
                    $('#blockSelectedBtn').toggle(hasUnblockedUser);
                    $('#unblockSelectedBtn').toggle(hasBlockedUser);
                    
                    // Show/hide admin buttons based on selection
                    $('#removeAdminSelectedBtn').toggle(hasAdminUser);
                    $('#makeAdminSelectedBtn').toggle(hasNonAdminUser);
                }
            } else {
                $('#selectionToolbar').addClass('hide');
            }
        }
        
        // Helper function to update "select all" checkbox state
        function updateSelectAllCheckbox() {
            const totalCheckboxes = $('.user-select-checkbox').length;
            const checkedCheckboxes = $('.user-select-checkbox:checked').length;
            
            if (checkedCheckboxes === 0) {
                $('#selectAllUsers').prop('checked', false);
                $('#selectAllUsers').prop('indeterminate', false);
            } else if (checkedCheckboxes === totalCheckboxes) {
                $('#selectAllUsers').prop('checked', true);
                $('#selectAllUsers').prop('indeterminate', false);
            } else {
                $('#selectAllUsers').prop('indeterminate', true);
            }
        }
        
        // Helper function to clear selection
        function clearSelection() {
            selectedUsers.clear();
            $('.user-select-checkbox').prop('checked', false);
            $('#usersTable tbody tr').removeClass('selected');
            $('#selectAllUsers').prop('checked', false);
            $('#selectAllUsers').prop('indeterminate', false);
            updateSelectionToolbar();
        }
        
        // Helper function to perform bulk action on selected users
        function performBulkAction(action, userIds) {
            $.ajax({
                url: `/Admin/${action}`,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ userIds: userIds }),
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        if (response.redirect) {
                            // Handle redirect case (e.g., when admin removes own access)
                            alert(response.message);
                            window.location.href = response.redirect;
                        } else {
                            // Reload page to reflect changes
                            location.reload();
                        }
                    } else {
                        alert('Error: ' + (response.message || 'An error occurred'));
                    }
                },
                error: function() {
                    alert('An error occurred while processing your request');
                }
            });
        }
        
        // Helper function to perform action on single user
        function performAction(action, userId) {
            $.ajax({
                url: `/Admin/${action}`,
                type: 'POST',
                data: { userId: userId },
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        if (response.redirect) {
                            // Handle redirect case (e.g., when admin removes own access)
                            alert(response.message);
                            window.location.href = response.redirect;
                        } else {
                            // Reload page to reflect changes
                            location.reload();
                        }
                    } else {
                        alert('Error: ' + (response.message || 'An error occurred'));
                    }
                },
                error: function() {
                    alert('An error occurred while processing your request');
                }
            });
        }
        
        // Function to show a custom confirmation dialog
        function showConfirmDialog(title, message, confirmCallback) {
            // Create modal if it doesn't exist
            if ($('#confirmationModal').length === 0) {
                const modalHtml = `
                    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <p id="confirmationMessage">Are you sure?</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary" id="confirmButton">OK</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                $('body').append(modalHtml);
                
                // Initialize the modal once
                const confirmModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                
                // Handle confirm button click
                $('#confirmButton').click(function() {
                    // Hide the modal
                    confirmModal.hide();
                    
                    // Execute the callback after modal is hidden
                    if ($(this).data('callback')) {
                        setTimeout(() => {
                            $(this).data('callback')();
                        }, 300);
                    }
                });
                
                // Clear callback when modal is hidden
                $('#confirmationModal').on('hidden.bs.modal', function() {
                    $('#confirmButton').data('callback', null);
                });
            }
            
            // Set the modal content
            $('#confirmationModalLabel').text(title || 'Confirm Action');
            $('#confirmationMessage').text(message || 'Are you sure?');
            
            // Store the callback function
            $('#confirmButton').data('callback', confirmCallback);
            
            // Show the modal
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            confirmModal.show();
        }
    });
</script>

<!-- Add modal for confirmation dialogs -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationMessage">Are you sure?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmButton">OK</button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom styling for the confirmation modal */
    #confirmationModal .modal-content {
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }
    
    #confirmationModal .modal-header {
        padding: 12px 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }
    
    #confirmationModal .modal-footer {
        padding: 10px 16px;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }
    
    #confirmButton {
        background-color: #4285f4;
        border-color: #4285f4;
    }
    
    #confirmButton:hover {
        background-color: #3367d6;
        border-color: #3367d6;
    }
</style>
